/*
There are n guests attending a dinner party, numbered from 1 to n. The ith guest has a height of arr[i] inches.
The guests will sit down at a circular table which has n seats, numbered from 1 to n in clockwise order around the table.
As the host, you will choose how to arrange the guests, one per seat. Note that there are n! possible permutations of seat assignments.
Once the guests have sat down, the awkwardness between a pair of guests sitting in adjacent seats is defined as the
absolute difference between their two heights. Note that, because the table is circular, seats 1 and n are considered
to be adjacent to one another, and that there are therefore n pairs of adjacent guests.
The overall awkwardness of the seating arrangement is then defined as the maximum awkwardness of any pair of adjacent
guests. Determine the minimum possible overall awkwardness of any seating arrangement.

Signature
int minOverallAwkwardness(int[] arr)
Input
n is in the range [3, 1000].
Each height arr[i] is in the range [1, 1000].
Output
Return the minimum achievable overall awkwardness of any seating arrangement.

Example
n = 4
arr = [5, 10, 6, 8]
output = 4
If the guests sit down in the permutation [3, 1, 4, 2] in clockwise order around the table
(having heights [6, 5, 8, 10], in that order), then the four awkwardnesses between pairs of adjacent
guests will be |6-5| = 1, |5-8| = 3, |8-10| = 2, and |10-6| = 4, yielding an overall awkwardness of 4.
It's impossible to achieve a smaller overall awkwardness.
*/

Solution : the first though is that we sort and then take the diff but this will not work as this is circular table and 
the first and last index will have alot of diff.
Hence we need to think to plot a normal distribution where we put the two minimum on two side and then keep filling till the middle
to become the max
-> Sort the Array in ascending order
-> Visualize that we need to arrange this data as a normal distribution (max comes in middle, mins goes in the edges) like

this are the two way to create a circle for odd and even
12345

   5
  3  4
 2    1  ///int diff = arr[1] - arr[0];

123456

      6
     5  4
    3    2
      1


int minOverallAwkwardness(int[] arr) {
    Arrays.sort(arr);
    int diff = arr[1] - arr[0]; // this is because they will come adjacent to one another in circle
    
    for (int i = 2; i < arr.length; i++) 
    {
      diff = Math.max(diff, arr[i] - arr[i - 2]); // just taking the difference of two adjacent numbers
    }
    
    return diff;
}
